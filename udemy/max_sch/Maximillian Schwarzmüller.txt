Python Django - The Practical Guide

ubuntu guide
location
C:\Users\chris\my_scripts\udemy_projects\max_sch
cd ./../my_scripts/udemy_projects/max_sch/
cd Users/chris/my_scripts/udemy_projects/max_sch/

create a virtual enviroment?
python3.8 -m venv vvenv
think about your python version and its stability with django as we are at 
python3.11 
python --version

activate virtual environment
source vvenv/bin/activate

deactivate virtual environment
deactivate

check the enviroment
pip list

install django framework
pip install django

start the challenges project
django-admin startproject monthly_challenges

create your first app
python3 manage.py startapp challenges

run the development server
python3 manage.py runserver

create a view
from django.http import HttpResponse
a (function) that returns a html response

create a urls.py file in the app folder
from django.urls import path
from . import views : from current folder import views
in this file create a list called urlpatterns
within this list you should have at least 2 matching sections
1. a url path: "this is a str cast" == january
2. the view this path is pointing to: a function located in views.py == views.index
both are variables within the path function.
e.g path("january",views.index)

Make the app visible to the project by connecting the apps urls to the projects urls
by adding a path statement in the urlpatterns for the challenges app
go to project folder monthly challenges urls.py
1. identify the app location to the project : "challenges"
2. download all urls from the app to the project: include('challenges.urls')
e.g path("challenges",include('challenges.urls'))

note; in the urlpatterns in url.py, you can use the "<variable name>" as a place holder for the path statement so you dont have to hardcode your paths

to use the reverse function first import from django.urls import reverse.
the reverse function takes the name from the urlpatterns associated with a path and the dynamic argument you want to show in the webpage
eg. reverse("month-challenge", args[])


using templates notes:
create a folder named templates in your app folder and create another folder
within the templates folder create another folder with the same name as your app

in the view.py import the template loader from django.template.loader import render_to_string

if you cant see your template, go to project layer of the folder and adapt the settings on the Template global variable called TEMPLATES =[BASE_DIR / "challenges" / "templates"] or even better register your app in the INSTALLED_APPS = ['challenges'] field in settings

how to use the render function?
the render() requires 3 parameters the "request" the path in the template folder to the templated html file and a dictionary with key value pairs of a name you give the key and the value from your previous created dict eg return render(request, "challenges/challenge.html", {"text":output})
and then using DTL for the html section intrapolate or inject the text and output into your html file

do more of your presentation work and filtering in the html document, leave the view.py on for business logic as much as possible.
see https://docs.djangoproject.com/en/4.2/ref/templates/builtins/ 
for filters  and tags

how to use the for tag, use a block to expose DTL to the html with a single curly braces and percentage symbol {% %} and each block should have an opening braces and closing braces. Remember any where you want to inject dynamic text you can use the {{}}. includinging <a href="", eg in html doc 
{% for month in months %}
<a href="/challenges/{{month}}">{{month|capfirst}}</a>
{% endfor %}

to avoid hardcoding values in html doc, you can also use the builtin tag for url and place it in the <a href=""> tag eg {% url 'month-challenge' month%}
key parameters
-url
- found in the app url.py folder name of path:
- the value to be outputted either use in this case the dynamic value in url.py month from or the month from the view.py eg.
return render(request, "challenges/challenge.html", {"text":output, "month": cap_month}) the "month" value name in the dictionary

Template inheritance
using the {% block page_title %} tag in base.html template to dynamically inject data into template for dymanic output. each block has to have a name eg. page_title  {% endblock %},
each block represent a window to display the data from processing by the view,py and possibly the database

how does it work, after defining your base html, for another html page to inherit from base.html in the index.html page for example use the {%extends base.html%}

what is the function of snippets`?
how do you use snippets?
go to the app folder, navigate to templates, navigate to the folder within templates that has the same name as your app create a folder called
includes within this create your html snippet. this can be navigation bars, headers and footers of a web page.
use the include syntax eg with the location of the snippet in the html page you want to insert the include{% include "challenges/includes/header.html" %}
dont forget to update app.urls.py with the path address for the snippet and use the include within a block statement.

how do you add static files to your app in django
do the same as you did when creating your first templates, create a folder in the app folder called static, then create another folder
within static named after the app. inside this folder save your css files and stuff
in your html templates you also need to activate the css, using syntax load static and also dont forget to update the base template with the static functionality so it travels across different pages 
inheriting/extending from base.html, i.e define the static block == {% block css_files %} space {% endblock %}
eg.
you are just calling the static funtionality in the script below
{% extends "base.html"%}
{% load static %}

{% block css_files %}
<link rel="stylesheet" href="{% static %}">
{% endblock %}

 and enclosed in blocks.

 - Making global static files section 58
 create static file folder at the root level next to global template files
 create your first global static file style.css
 inside style use @import url(style link from google)
 see static/style.css for info
 dont forget for Django doesnt know the Static global folder exists so you gonna have to create a variable in the settings file for it.
 STATICFILES_DIRS = []

- when accessing a dictionary in Django you cant use the python syntax, you have to use the dot notation eg dict_name[key] vs dict_name.key

section 74
what are migration? 
they enable django create databases and manage data entries automatically for you using the model.py file
- go to location where manage.py is located and enter syntax
python3 manage.py makemigrations 
followed by
python3 manage.py migrate

python3 manage.py shell gives 
from book_outlet.models import Book
dont forget to use the .save() on every database object created
Book.objects.all()
dont forget how to use .delete() to remove a model entry from db
dont forget how to use .get(title="") to get one unique entry, any get that will result in multiple responses will cause an CommandError
dont forget how to use .filter(dict_key_value=) what are the parameters used in filter()? what are the double underscore __qualifiers eg __lt(less than)
 or __gte (greater than or equals to?) __contains=
dont forget how to use .create(...)

section 88
the slug does not have to be identical to the url path remember this

section 106
how to do cross querying using the _set.all() method
eg 
jkr = Author.objects.get(first_name="J.K")
jkr.book_set -- creates a reverse many to one relationship author and book

what does the book_set do? is this unique to this app or a generalized term?
book_set is like objects but only for relationships

section 108
how to create a one  to one relationship in the models.py file
use a models.OneToOneField(Address, on_delete=models.CASCADE, related_name="author")

section 111
in a many to many relationship, you dont use the on_delete=CASCADE it wont work

section 112
How to use the .add() for many to many relationships and inverse relationship calls
the book_set.all() can also be used in the many to many relationship

section 114
what is a circular relationship?

section 135
what does this do in the html form {% csrf_token %}

section 136
<form action="/" method="POST"> what does the action= do, it redirects your POST to another webpage for processing and display

section 138
how to use the django form class
create form.py in app folder

section 139 stopped here

section 147 
difference between model and modelform

section 148 
difference between class (has get() and post()) and function views: 
when using class views update url using the classname.as_view() function eg
 path("",views.ReviewView.as_view()),

section 153 Template views
how to create view classes

section 171
Review code snapshot, my image files did not render

section 177
# SESSION_COOKIE_AGE = time in secs default is 2 weeks

section 180
dont store objects in sessions, strings,lists,ints,dicts are preferable

section 190